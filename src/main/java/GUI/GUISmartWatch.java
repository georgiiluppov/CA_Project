package GUI;

import smartwatchClientStream.SmartWatchClient;
import smartwatchClientStream.SmartWatchServer;

import javax.swing.*;

public class GUISmartWatch extends javax.swing.JPanel {
    public static boolean isServerRunningWatch = false;
    public static boolean isClientRunningWatch = false;
    public static String userIDGUI = "";

    public GUISmartWatch() {
        initComponents();
    }

    private java.io.PrintStream getPrintStreamFor(JTextArea area) {
        return new java.io.PrintStream(new java.io.OutputStream() {
            private StringBuilder buffer = new StringBuilder();

            @Override
            public void write(int b) {
                if (b == '\n') {
                    String line = buffer.toString();
                    buffer.setLength(0);
                    SwingUtilities.invokeLater(() -> area.append(line + "\n"));
                } else {
                    buffer.append((char) b);
                }
            }
        }, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        startServerSmartWatchButton = new javax.swing.JButton();
        startClientSmartWatchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaServerSmartWatch = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaClientSmartWatch = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        setToValidButton = new javax.swing.JButton();
        setToinValidButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Smart Watch - Client Stream");

        startServerSmartWatchButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startServerSmartWatchButton.setText("Start Server");
        startServerSmartWatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerSmartWatchButtonActionPerformed(evt);
            }
        });

        startClientSmartWatchButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startClientSmartWatchButton.setText("Start Client");
        startClientSmartWatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startClientSmartWatchButtonActionPerformed(evt);
            }
        });

        textAreaServerSmartWatch.setColumns(20);
        textAreaServerSmartWatch.setRows(5);
        jScrollPane1.setViewportView(textAreaServerSmartWatch);

        textAreaClientSmartWatch.setColumns(20);
        textAreaClientSmartWatch.setRows(5);
        jScrollPane2.setViewportView(textAreaClientSmartWatch);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("There is a 3 seconds delay just to make sure that service is registered");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("2. Please, press one of the buttons to set an ID");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("First will set ID to \"valid\", sesond to \"invalid\". If this step was skipped, will be assigned to valid");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("1. Start the Server");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("3. Start the Client");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("When the Client is started, is sends a stream of numbers (steps) to the Server, where all numbers calculated. Client also sends a number at what hour they want to receive a feedback.");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Depending on the \"hour\" user will see a different feedback (it is just basically a randomly generated number between 1 and 23). After that, Server sends feedback depending on how many");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("steps and hour. There is also a part with authorization, as a second step, user has to enter user ID in order to start stream. If it is not valid, the error will be thrown. In real life this data might");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("be taken from database (does not let access to users who are not authorized,) The ID can be submitted / resubmitted at any stage");

        setToValidButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        setToValidButton.setText("Set to valid ID");
        setToValidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setToValidButtonActionPerformed(evt);
            }
        });

        setToinValidButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        setToinValidButton.setText("Set to invalid ID");
        setToinValidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setToinValidButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startServerSmartWatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startClientSmartWatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setToValidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(setToinValidButton))
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(475, 475, 475)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10)))
                .addGap(0, 25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startServerSmartWatchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setToValidButton)
                            .addComponent(setToinValidButton))))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(3, 3, 3)
                .addComponent(startClientSmartWatchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public static boolean validID = false;
    private void setToValidButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!isServerRunningWatch) {
            JOptionPane.showMessageDialog(this, "Please, start the Server");
            return;
        }
        invalidID = false;
        validID = true;
        textAreaClientSmartWatch.append("Will run with valid ID. ");
    }

    public static boolean invalidID = false;
    private void setToinValidButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!isServerRunningWatch) {
            JOptionPane.showMessageDialog(this, "Please, start the Server");
            return;
        }
        validID = false;
        invalidID = true;
        textAreaClientSmartWatch.append("Will run with invalid ID. ");
    }

    private void startServerSmartWatchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (isServerRunningWatch) {
            return; 
        }
        isServerRunningWatch = true;
        
        new Thread(() -> {
            java.io.PrintStream originalOut = System.out;
            System.setOut(getPrintStreamFor(textAreaServerSmartWatch));
            System.setErr(getPrintStreamFor(textAreaServerSmartWatch));

            try {
                SmartWatchServer.main(new String[]{});
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                System.setOut(originalOut);
            }
        }).start();
    }

    private void startClientSmartWatchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!isServerRunningWatch) {
            SwingUtilities.invokeLater(() -> 
                textAreaClientSmartWatch.append("Cannot start client: Server is not running.")
            );
            return;
        }
        
        if(!validID && !invalidID){
            validID = true;
        }
        
        isClientRunningWatch = true;
        textAreaClientSmartWatch.append("Waiting for a respond...");
        
        new Thread(() -> {
            java.io.PrintStream originalOut = System.out;
            System.setOut(getPrintStreamFor(textAreaClientSmartWatch));
            System.setErr(getPrintStreamFor(textAreaClientSmartWatch));
            try {
                SmartWatchClient.main(new String[]{});
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                System.setOut(originalOut);
            }
        }).start();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton setToValidButton;
    private javax.swing.JButton setToinValidButton;
    private javax.swing.JButton startClientSmartWatchButton;
    private javax.swing.JButton startServerSmartWatchButton;
    private javax.swing.JTextArea textAreaClientSmartWatch;
    private javax.swing.JTextArea textAreaServerSmartWatch;
    // End of variables declaration//GEN-END:variables
}
