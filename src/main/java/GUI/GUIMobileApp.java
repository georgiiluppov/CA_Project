package GUI;

import mobileAppServerStream.MobileAppClient;
import mobileAppServerStream.MobileAppServer;

import javax.swing.*;

public class GUIMobileApp extends javax.swing.JPanel {
    private boolean isServerRunning = false;
    private boolean isCkientRunning = false;
    
    public GUIMobileApp() {
        initComponents();
    }

    private java.io.PrintStream getPrintStreamFor(JTextArea area) {
        return new java.io.PrintStream(new java.io.OutputStream() {
            private StringBuilder buffer = new StringBuilder();

            @Override
            public void write(int b) {
                if (b == '\n') {
                    String line = buffer.toString();
                    buffer.setLength(0);
                    SwingUtilities.invokeLater(() -> area.append(line + "\n"));
                } else {
                    buffer.append((char) b);
                }
            }
        }, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        startServerMobileApp = new javax.swing.JButton();
        startClientMobileApp = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaMobileAppServer = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaMobileAppClient = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        mobileAppSubmitButton = new javax.swing.JButton();
        inputMobileAppSeconds = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        simulateDelayButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Mobile App - Server Stream");

        startServerMobileApp.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startServerMobileApp.setText("Start Server");
        startServerMobileApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerMobileAppActionPerformed(evt);
            }
        });

        startClientMobileApp.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startClientMobileApp.setText("Start Client");
        startClientMobileApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startClientMobileAppActionPerformed(evt);
            }
        });

        textAreaMobileAppServer.setColumns(20);
        textAreaMobileAppServer.setRows(5);
        jScrollPane1.setViewportView(textAreaMobileAppServer);

        textAreaMobileAppClient.setColumns(20);
        textAreaMobileAppClient.setRows(5);
        jScrollPane2.setViewportView(textAreaMobileAppClient);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("There is a 3 seconds delay just to make sure that service is registered");

        mobileAppSubmitButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mobileAppSubmitButton.setText("Submit");
        mobileAppSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileAppSubmitButtonActionPerformed(evt);
            }
        });

        inputMobileAppSeconds.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        inputMobileAppSeconds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputMobileAppSecondsActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Please enter how often you want to receive notifications between 1 and 10 (sec)");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("If this field is empty or input is invalid, the number will be randomly generated");

        simulateDelayButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        simulateDelayButton.setText("Simulate Delay");
        simulateDelayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateDelayButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Simulate 15 sec delay, so deadline will be triggered");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Service Description:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("When Client is started, it sends request to the server (frequency of notifications in sec). The Server starts sending reminder every nTH second. If textarea is empty, random number will be");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("generated between 1 and 10 - and this num will be used as an amount of sec between reminders. Also Client can be unavailable, in this case there is a button below to simulate a delay. ");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("If the \"delay\" button was clicked, this will set the timeout for 15 seconds, which eventually will trigger the deadline in the Client (if server does not respond within 15 sec, it stops the stream)");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("1. Start the Server");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 51, 51));
        jLabel11.setText("2. Enter and Submit how often the Client will be receiving reminders (sec)");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 51, 51));
        jLabel12.setText("3. Start the Client");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 51, 51));
        jLabel13.setText("4. Simulate delay (optional)");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 51, 51));
        jLabel14.setText(" (if empty or wrong input - random will be generated))");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("Server will send 30 reminders (for loop), unless the delay is simulated. (in real life can run until the Client \"unsubscribes\" from the server).");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(461, 461, 461)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(startClientMobileApp, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)
                                    .addComponent(startServerMobileApp, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel14))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(inputMobileAppSeconds)
                                            .addComponent(mobileAppSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(32, 32, 32))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(214, 214, 214)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel13)
                                            .addComponent(simulateDelayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel15))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startServerMobileApp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(inputMobileAppSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(mobileAppSubmitButton))
                        .addGap(37, 37, 37)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startClientMobileApp)
                    .addComponent(simulateDelayButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startServerMobileAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerMobileAppActionPerformed
        if (isServerRunning) {
            return; 
        }
        isServerRunning = true;
        
        new Thread(() -> {
            java.io.PrintStream originalOut = System.out;
            System.setOut(getPrintStreamFor(textAreaMobileAppServer));
            System.setErr(getPrintStreamFor(textAreaMobileAppServer));

            try {
                MobileAppServer.main(new String[]{});
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                System.setOut(originalOut);
            }
        }).start();
    }//GEN-LAST:event_startServerMobileAppActionPerformed

    private void startClientMobileAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startClientMobileAppActionPerformed
        if (!isServerRunning) {
            SwingUtilities.invokeLater(() -> 
                textAreaMobileAppClient.append("Cannot start client: Server is not running.")
            );
        return;
        }
        
        isCkientRunning = true;
        
        textAreaMobileAppClient.append("Waiting for a respond...");
        
        new Thread(() -> {
            java.io.PrintStream originalOut = System.out;
            System.setOut(getPrintStreamFor(textAreaMobileAppClient));
            System.setErr(getPrintStreamFor(textAreaMobileAppClient));
            try {
                MobileAppClient.main(new String[]{});
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                System.setOut(originalOut);
            }
        }).start();
    }//GEN-LAST:event_startClientMobileAppActionPerformed

    private void inputMobileAppSecondsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputMobileAppSecondsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputMobileAppSecondsActionPerformed

    private Integer userSec = null;
    private void mobileAppSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobileAppSubmitButtonActionPerformed
        String input = inputMobileAppSeconds.getText().trim();
        if (input.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No severity entered. It will be randomly generated by the client.");
            MobileAppServer.secFromGUI = null; 
        } else {
            try {
                int userSec = Integer.parseInt(input);

                if (userSec >= 1 && userSec <= 10) {
                    JOptionPane.showMessageDialog(this, "Number has been set: " + userSec);
                    MobileAppServer.secFromGUI = userSec; 
                } else {
                    JOptionPane.showMessageDialog(this, "Number will be randomly generated");
                    MobileAppServer.secFromGUI = null;
                }
            
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Number will be randomly generated");
                MobileAppServer.secFromGUI = null;
            }
        }
    }//GEN-LAST:event_mobileAppSubmitButtonActionPerformed

    public static boolean simulateDelayGUI = false;
    private void simulateDelayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateDelayButtonActionPerformed
        if (!isServerRunning) {
            JOptionPane.showMessageDialog(this, "Cannot simulate delay: Server is not running.");
            return;
        }
        
        if(!isCkientRunning){
            JOptionPane.showMessageDialog(this, "Cannot simulate delay. Please start the stream first");
            return;
        }
        
        simulateDelayGUI = true;
        textAreaMobileAppClient.append("Simulating delay 15 sec");
    }//GEN-LAST:event_simulateDelayButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputMobileAppSeconds;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mobileAppSubmitButton;
    private javax.swing.JButton simulateDelayButton;
    private javax.swing.JButton startClientMobileApp;
    private javax.swing.JButton startServerMobileApp;
    private javax.swing.JTextArea textAreaMobileAppClient;
    private javax.swing.JTextArea textAreaMobileAppServer;
    // End of variables declaration//GEN-END:variables
}
