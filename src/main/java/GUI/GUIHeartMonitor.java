package GUI;

import heartMonitorBidirectionalStream.HeartRateClient;
import heartMonitorBidirectionalStream.HeartRateServer;

import javax.swing.*;

public class GUIHeartMonitor extends javax.swing.JPanel {
    private boolean isServerRunning = false;
    private boolean isCkientRunning = false;
    
    public GUIHeartMonitor() {
        initComponents();
    }

    private java.io.PrintStream getPrintStreamFor(JTextArea area) {
        return new java.io.PrintStream(new java.io.OutputStream() {
            private StringBuilder buffer = new StringBuilder();

            @Override
            public void write(int b) {
                if (b == '\n') {
                    String line = buffer.toString();
                    buffer.setLength(0);
                    SwingUtilities.invokeLater(() -> area.append(line + "\n"));
                } else {
                    buffer.append((char) b);
                }
            }
        }, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        startServerHeartMonitor = new javax.swing.JButton();
        startClientHeartMonitor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaHeartMonitorServer = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaHeartMonitorClient = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        interruptBidirectionalStreamButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Heart Monitor - Bidirectional Stream");

        startServerHeartMonitor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startServerHeartMonitor.setText("Start Server");
        startServerHeartMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerHeartMonitorActionPerformed(evt);
            }
        });

        startClientHeartMonitor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startClientHeartMonitor.setText("Start Client");
        startClientHeartMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startClientHeartMonitorActionPerformed(evt);
            }
        });

        textAreaHeartMonitorServer.setColumns(20);
        textAreaHeartMonitorServer.setRows(5);
        jScrollPane1.setViewportView(textAreaHeartMonitorServer);

        textAreaHeartMonitorClient.setColumns(20);
        textAreaHeartMonitorClient.setRows(5);
        jScrollPane2.setViewportView(textAreaHeartMonitorClient);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("There is a 3 seconds delay just to make sure that service is registered");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Stream will continue for 30 iterations unless user presses the button \"interrupt stream\"");

        interruptBidirectionalStreamButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        interruptBidirectionalStreamButton.setText("Interrupt stream");
        interruptBidirectionalStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interruptBidirectionalStreamButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Service Description:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("When the Client is started, it sends BPM (randomly generated number from 10 to 250) every 5 seconds to the server");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("After that the Client will keep sending BPM 30 times (for loop) and server will reply 30 times (could run indefinitely).");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Server responses if the BPM is to high or to low and asks the user if they want emergency services to be called");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Stream can be interrupted by the user if they want to \"unsubscribe\" from server's feedback");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 51, 51));
        jLabel9.setText("1. Start the Server");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("2. Start the Client");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 51, 51));
        jLabel11.setText("3. Interrupt the stream (optional)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(startClientHeartMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(interruptBidirectionalStreamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(455, 455, 455))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startServerHeartMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8))))
                            .addComponent(startServerHeartMonitor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(interruptBidirectionalStreamButton)
                            .addComponent(startClientHeartMonitor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startServerHeartMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerHeartMonitorActionPerformed
        if (isServerRunning) {
            return; 
        }
        isServerRunning = true;
        
        new Thread(() -> {
            java.io.PrintStream originalOut = System.out;
            System.setOut(getPrintStreamFor(textAreaHeartMonitorServer));
            System.setErr(getPrintStreamFor(textAreaHeartMonitorServer));

            try {
                HeartRateServer.main(new String[]{});
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                System.setOut(originalOut);
            }
        }).start();
    }//GEN-LAST:event_startServerHeartMonitorActionPerformed

    private void startClientHeartMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startClientHeartMonitorActionPerformed
        if (!isServerRunning) {
            JOptionPane.showMessageDialog(this, "Cannot start client: Server is not running.");
            return;
        }
        isCkientRunning = true;
        stopStreamGUI = false;
        
        textAreaHeartMonitorClient.append("Waiting for a respond...");
        new Thread(() -> {
            java.io.PrintStream originalOut = System.out;
            System.setOut(getPrintStreamFor(textAreaHeartMonitorClient));
            System.setErr(getPrintStreamFor(textAreaHeartMonitorClient));
            try {
                HeartRateClient.main(new String[]{});
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                System.setOut(originalOut);
            }
        }).start();
    }//GEN-LAST:event_startClientHeartMonitorActionPerformed

    public static boolean stopStreamGUI = false;
    private void interruptBidirectionalStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interruptBidirectionalStreamButtonActionPerformed
        if (!isServerRunning) {
            JOptionPane.showMessageDialog(this, "Cannot interrupt client: Server is not running.");
            return;
        }
        
        if(!isCkientRunning){
            JOptionPane.showMessageDialog(this, "Please start the stream first");
            return;
        }
        
        stopStreamGUI = true;
        textAreaHeartMonitorClient.append("Stream interruption requested by user");
    }//GEN-LAST:event_interruptBidirectionalStreamButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton interruptBidirectionalStreamButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton startClientHeartMonitor;
    private javax.swing.JButton startServerHeartMonitor;
    private javax.swing.JTextArea textAreaHeartMonitorClient;
    private javax.swing.JTextArea textAreaHeartMonitorServer;
    // End of variables declaration//GEN-END:variables
}
